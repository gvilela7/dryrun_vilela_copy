<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="Addon Product">
  <PreFlow name="PreFlow">
    <Request>
      <Step>
        <Name>FC-NorthboundAuth</Name>
      </Step>
      <Step>
        <Name>OAS-AddonProduct</Name>
      </Step>
      <Step>
        <Name>FC-SouthboundAuth</Name>
      </Step>
    </Request>
    <Response/>
  </PreFlow>
  <Flows>
    <Flow name="CreateAddonProduct">
      <Description>Create Product</Description>
      <Request>
        <Step>
          <Name>EV-ReqFieldsAddon</Name>
          <Condition>(request.content != null)</Condition>
        </Step>
        <Step>
          <Name>RF-BadRequest</Name>
          <Condition>(extractvariables.EV-ReqFieldsAddon.failed = true)</Condition>
        </Step>
        <Step>
          <Name>JS-CharacteristicsToString</Name>
        </Step>
        <Step>
          <Name>RF-JSError</Name>
          <Condition>(js.isError = true)</Condition>
        </Step>
        <Step>
          <Name>JSONToXML-Request</Name>
        </Step>
        <Step>
          <Name>XSL-MapRequest</Name>
        </Step>
      </Request>
      <Response>
        <Step>
          <Name>AM-EmptyResponse</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix JavaRegex "/charging(/?)") and (request.verb = "POST")</Condition>
    </Flow>
    <Flow name="QueryAddonProduct">
      <Description>Query Product</Description>
      <Request>
        <Step>
          <Name>EV-ReqFieldsHeadersAddon</Name>
          <Condition>(request.content != null)</Condition>
        </Step>
        <Step>
          <Name>EV-PathParamAddon</Name>
        </Step>
        <Step>
          <Name>RF-BadRequest</Name>
          <Condition>(extractvariables.EV-ReqFieldsHeadersAddon.failed = true) or
                        (extractvariables.EV-PathParamAddon.failed = true)</Condition>
        </Step>
      </Request>
      <Response>
        <Step>
          <Name>XMLToJSON-Response</Name>
        </Step>
        <Step>
          <Name>JS-MapResponse</Name>
        </Step>
        <Step>
          <Name>RF-JSError</Name>
          <Condition>(js.isError = true)</Condition>
        </Step>
        <Step>
          <Name>AM-QueryResponse</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix MatchesPath "/charging/*") and (request.verb = "GET")</Condition>
    </Flow>
    <Flow name="UpdateAddonProduct">
      <Description>Update Product</Description>
      <Request>
        <!-- Extracting Request Data -->
        <Step>
          <Name>EV-ReqFieldsAddon</Name>
          <Condition>(request.content != null)</Condition>
        </Step>
        <Step>
          <Name>EV-PathParamAddon</Name>
        </Step>
        <Step>
          <Name>RF-BadRequest</Name>
          <Condition>(extractvariables.EV-ReqFieldsAddon.failed = true) or
                        (extractvariables.EV-PathParamAddon.failed = true)</Condition>
        </Step>
        <Step>
          <Name>JS-CharacteristicsToString</Name>
        </Step>
        <Step>
          <Name>RF-JSError</Name>
          <Condition>(js.isError = true)</Condition>
        </Step>
        <!-- ________Callout for Current Data________ -->
        <Step>
          <Name>AM-CalloutRequestAddon</Name>
        </Step>
        <!-- record start time of SC -->
        <Step>
          <Name>AM-LogServiceCallout</Name>
        </Step>
        <Step>
          <Name>SC-GetCurrentData</Name>
        </Step>
        <Step>
          <Name>FC-LogServiceGetCurrData</Name>
        </Step>
        <!-- Error: Move calloutResponse to error mapping flow -->
        <Step>
          <Name>AM-CalloutErrorSetAsResponse</Name>
          <Condition>(calloutResponse.status.code != null and calloutResponse.status.code GreaterThan 299)</Condition>
        </Step>
        <Step>
          <Name>RF-ServiceCalloutResponseCode</Name>
          <Condition>(calloutResponse.status.code != null and calloutResponse.status.code GreaterThan 299)</Condition>
        </Step>
        <Step>
          <Name>RF-ServiceCalloutTimeout</Name>
          <Condition>(servicecallout.SC-ChargingGetCurrentData.failed = true and calloutResponse = null)</Condition>
        </Step>
        <!-- Success: Extract Callout data : convert to json and map to TMF-->
        <Step>
          <Name>XMLToJSON-CalloutResponse</Name>
        </Step>
        <Step>
          <Name>JS-MapResponse</Name>
        </Step>
        <Step>
          <Name>RF-JSError</Name>
          <Condition>(js.isError = true)</Condition>
        </Step>
        <!-- ________Merge Data________ : Client Request vs Current Data-->
        <Step>
          <Name>JS-UpdateOperations</Name>
        </Step>
        <Step>
          <Name>RF-JSError</Name>
          <Condition>(js.isError = true)</Condition>
        </Step>
        <!-- ________Create Target Request________ : Convert to XML and map to producer -->
        <Step>
          <Name>JSONToXML-Request</Name>
        </Step>
        <Step>
          <Name>XSL-MapRequest</Name>
        </Step>
      </Request>
      <Response>
        <!-- Set response to client-->
        <Step>
          <Name>AM-EmptyResponse</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix MatchesPath "/charging/*") and (request.verb = "PUT")</Condition>
    </Flow>
    <Flow name="DeleteAddonProduct">
      <Description>Delete Product</Description>
      <Request>
        <Step>
          <Name>EV-ReqFieldsHeadersAddon</Name>
          <Condition>(request.content != null)</Condition>
        </Step>
        <Step>
          <Name>EV-PathParamAddon</Name>
        </Step>
        <Step>
          <Name>RF-BadRequest</Name>
          <Condition>(extractvariables.EV-ReqFieldsHeadersAddon.failed = true) or
                        (extractvariables.EV-PathParamAddon.failed = true)</Condition>
        </Step>
      </Request>
      <Response>
        <Step>
          <Name>AM-DeleteResponse</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix MatchesPath "/charging/*") and (request.verb = "DELETE")</Condition>
    </Flow>
  </Flows>
  <PostFlow name="PostFlow">
    <Request/>
  </PostFlow>
  <PostClientFlow>
    <Response>
      <Step>
        <!-- Call Shared Flow to send the Logging -->
        <Name>FC-SendLog</Name>
      </Step>
    </Response>
  </PostClientFlow>
  <FaultRules>
    <!-- FaultRules are evaluated from bottom to top in ProxyEndpoint -->
    <FaultRule name="ServiceCalloutResponseCode">
      <Step>
        <Name>EV-ErrorMessage</Name>
        <Condition>response.content != null</Condition>
      </Step>
      <Step>
        <Name>AM-HTTPErrorResponse</Name>
      </Step>
      <Condition>(fault.name matches "RaiseFault") and (raisefault.RF-ServiceCalloutResponseCode.failed = true)</Condition>
    </FaultRule>
    <FaultRule name="GatewayTimeout">
      <Step>
        <Name>AM-GatewayTimeout</Name>
      </Step>
      <Step>
        <Name>FC-FaultHandling</Name>
      </Step>
      <Condition>(fault.name matches "RaiseFault") and (raisefault.RF-ServiceCalloutTimeout.failed = true)</Condition>
    </FaultRule>
  </FaultRules>
  <DefaultFaultRule name="fault-rule">
    <Step>
      <Name>FC-FaultHandling</Name>
    </Step>
  </DefaultFaultRule>
  <HTTPProxyConnection>
    <BasePath>/tmf-api/productManagement/v2/product/addon</BasePath>
    <Properties>
      <Property name="api.timeout">55000</Property>
    </Properties>
  </HTTPProxyConnection>
  <RouteRule name="Charging">
    <TargetEndpoint>ocs-rfb_Agreements_Addon</TargetEndpoint>
  </RouteRule>
  <Description>MVP_API_ID_21</Description>
</ProxyEndpoint>
